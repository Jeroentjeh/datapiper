% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pipeline.R
\name{pipeline_function}
\alias{pipeline_function}
\title{Wrapper for putting a single function into a pipeline}
\usage{
pipeline_function(train, f, ...)
}
\arguments{
\item{train}{Data frame containing the train data.}

\item{f}{The function to be put into the pipeline. It is important that the function can be applied to new datasets without using any information from the train dataset, e.g. lowercasing column names.
It should take a \code{data} argumet}

\item{...}{Additional arguments to be provided to \code{f}}
}
\value{
A list of the transformed train dataset and a .predict function to be used on new data.
}
\description{
Wrapper for putting a single function into a pipeline
}
\examples{
data <- dplyr::data_frame(var = 0, Var = 0, camelCase = 0, good_name = 0,
                          `0none.` = 0, `bad  ` = 0, `j&d` = 0, `spac ed` = 0)
pipeline_function(data, standard_column_names)

# You can also use this to append a custom model to the pipeline
data <- dplyr::data_frame(x = 1:10, y = (1:10) + rnorm(10))
model <- lm(y ~ x, data)

self_contained_function <- function(data) predict(model, data)
pipe <- pipeline_function(data, self_contained_function)

predictions <- pipe$.predict(data)
}
